openapi: 3.0.0
info:
  title: Anti-Social-Relational - Grupo 6
  description: API de anti-social-relational con Swagger en YAML
  version: "1.0.0"

servers:
  - url: http://localhost:3000/api
    description: Servidor local

paths:
  /posts:
    get:
      summary: Obtener todos los posts
      tags: [Posts]
      description: Devuelve una lista de todos los posts con sus autores, imágenes, comentarios recientes y tags asociados.
      responses:
        '200':
          description: Lista de posts obtenida exitosamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Crear un nuevo post
      tags: [Posts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostInput'
      responses:
        '201':
          description: Post creado exitosamente.
        '400':
          description: Datos de entrada inválidos.
        '404':
          description: Usuario autor no encontrado.

  /posts/{id}:
    get:
      summary: Obtener un post por su ID
      tags: [Posts]
      parameters:
        - name: id
          in: path
          required: true
          description: ID del post a obtener.
          schema:
            type: integer
      responses:
        '200':
          description: Datos del post obtenidos exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post no encontrado.
    put:
      summary: Actualizar un post existente
      tags: [Posts]
      parameters:
        - name: id
          in: path
          required: true
          description: ID del post a actualizar.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: "Esta es la nueva descripción del post."
      responses:
        '200':
          description: Post actualizado exitosamente.
        '404':
          description: Post no encontrado.
    delete:
      summary: Eliminar un post por su ID
      tags: [Posts]
      parameters:
        - name: id
          in: path
          required: true
          description: ID del post a eliminar.
          schema:
            type: integer
      responses:
        '200':
          description: Post eliminado exitosamente.
        '404':
          description: Post no encontrado.

  /posts/{postId}/add-comment:
    post:
      summary: Añadir un comentario a un post
      tags: [Posts]
      parameters:
        - name: postId
          in: path
          required: true
          description: ID del post al que se le añadirá el comentario.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: "¡Qué buen post!"
                nickName:
                  type: string
                  example: "alice_wonder"
      responses:
        '201':
          description: Comentario añadido exitosamente.
        '404':
          description: Post o Usuario no encontrado.

  /users:
    get:
      summary: Obtener todos los usuarios
      tags: [Users]
      responses:
        '200':
          description: Lista de usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Crear un nuevo usuario
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickName:
                  type: string
                  example: "nuevo_usuario"
      responses:
        '201':
          description: Usuario creado.
        '409':
          description: El nickName ya está en uso.

  /users/{nickName}:
    get:
      summary: Obtener un usuario por su nickName
      tags: [Users]
      parameters:
        - name: nickName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Datos del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado.

  /post-images/by-id/{id}:
    get:
      summary: Obtener una imagen de post por su ID
      tags: [Post Images]
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la imagen a obtener.
          schema:
            type: integer
      responses:
        '200':
          description: Imagen obtenida exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostImage'
        '500':
          description: Error al obtener la imagen.

  /post-images/by-post/{postId}:
    get:
      summary: Obtener todas las imágenes de un post
      tags: [Post Images]
      parameters:
        - name: postId
          in: path
          required: true
          description: ID del post.
          schema:
            type: integer
      responses:
        '200':
          description: Lista de imágenes del post.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostImage'
        '500':
          description: Error al obtener las imágenes del post.

  /post-images:
    post:
      summary: Crear una nueva imagen para un post
      tags: [Post Images]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imageUrl
                - postId
              properties:
                imageUrl:
                  type: string
                  format: uri
                  example: "https://picsum.photos/800/600"
                postId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Imagen del post creada exitosamente.
        '404':
          description: El post con el ID especificado no existe.
        '500':
          description: Error al crear la imagen.

  /post-images/{id}:
    put:
      summary: Actualizar una imagen de post
      tags: [Post Images]
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la imagen a actualizar.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
                  format: uri
                  example: "https://picsum.photos/800/600"
      responses:
        '200':
          description: Imagen actualizada exitosamente.
        '404':
          description: La imagen del post no fue encontrada.
        '500':
          description: Error al modificar la imagen.
    delete:
      summary: Eliminar una imagen de post
      tags: [Post Images]
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la imagen a eliminar.
          schema:
            type: integer
      responses:
        '204':
          description: Imagen eliminada exitosamente.
        '500':
          description: Error al eliminar la imagen del post.

  /followers:
    post:
      summary: Seguir a un usuario
      tags: [Followers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - follower_nickname
                - followed_nickname
              properties:
                follower_nickname:
                  type: string
                  example: "alice_wonder"
                followed_nickname:
                  type: string
                  example: "bob_builder"
      responses:
        '201':
          description: Usuario seguido exitosamente.
        '404':
          description: El usuario seguidor o el usuario a seguir no existe.
        '409':
          description: Ya sigues a este usuario.
        '500':
          description: Error al seguir al usuario.
    delete:
      summary: Dejar de seguir a un usuario
      tags: [Followers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - follower_nickname
                - followed_nickname
              properties:
                follower_nickname:
                  type: string
                  example: "alice_wonder"
                followed_nickname:
                  type: string
                  example: "bob_builder"
      responses:
        '200':
          description: Dejaste de seguir al usuario exitosamente.
        '404':
          description: No sigues a este usuario.
        '500':
          description: Error al dejar de seguir al usuario.

  /followers/{nickname}:
    get:
      summary: Obtener los seguidores de un usuario
      tags: [Followers]
      parameters:
        - name: nickname
          in: path
          required: true
          description: Nickname del usuario.
          schema:
            type: string
      responses:
        '200':
          description: Lista de seguidores obtenida exitosamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado.
        '500':
          description: Error al obtener los seguidores.

  /followers/following/{nickname}:
    get:
      summary: Obtener los usuarios que sigue un usuario
      tags: [Followers]
      parameters:
        - name: nickname
          in: path
          required: true
          description: Nickname del usuario.
          schema:
            type: string
      responses:
        '200':
          description: Lista de usuarios seguidos obtenida exitosamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado.
        '500':
          description: Error al obtener los seguidos.

components:
  schemas:
    User:
      type: object
      properties:
        nickName:
          type: string
          example: "alice_wonder"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Comment:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
          example: "¡Gran post!"
        nickName:
          type: string
        createdAt:
          type: string
          format: date-time

    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "nodejs"

    PostImage:
      type: object
      properties:
        id:
          type: integer
        imageUrl:
          type: string
          format: uri
          example: "https://picsum.photos/800/600"
          
    Post:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
          example: "Mi primer post en la red social!"
        nickName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/User'
        images:
          type: array
          items:
            $ref: '#/components/schemas/PostImage'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            
    CreatePostInput:
      type: object
      required:
        - description
        - nickName
      properties:
        description:
          type: string
          example: "Un post sobre desarrollo web."
        nickName:
          type: string
          example: "bob_builder"
        imageUrls:
          type: array
          items:
            type: string
            format: uri
          example: ["https://picsum.photos/800/600?random=1"]
        tags:
          type: array
          items:
            type: string
          example: ["nodejs", "sequelize"]